{"ast":null,"code":"'use strict';\n\nvar $export = require('./_export');\n\nvar $typed = require('./_typed');\n\nvar buffer = require('./_typed-buffer');\n\nvar anObject = require('./_an-object');\n\nvar toAbsoluteIndex = require('./_to-absolute-index');\n\nvar toLength = require('./_to-length');\n\nvar isObject = require('./_is-object');\n\nvar ArrayBuffer = require('./_global').ArrayBuffer;\n\nvar speciesConstructor = require('./_species-constructor');\n\nvar $ArrayBuffer = buffer.ArrayBuffer;\nvar $DataView = buffer.DataView;\nvar $isView = $typed.ABV && ArrayBuffer.isView;\nvar $slice = $ArrayBuffer.prototype.slice;\nvar VIEW = $typed.VIEW;\nvar ARRAY_BUFFER = 'ArrayBuffer';\n$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {\n  ArrayBuffer: $ArrayBuffer\n});\n$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {\n  // 24.1.3.1 ArrayBuffer.isView(arg)\n  isView: function isView(it) {\n    return $isView && $isView(it) || isObject(it) && VIEW in it;\n  }\n});\n$export($export.P + $export.U + $export.F * require('./_fails')(function () {\n  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;\n}), ARRAY_BUFFER, {\n  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)\n  slice: function slice(start, end) {\n    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix\n\n    var len = anObject(this).byteLength;\n    var first = toAbsoluteIndex(start, len);\n    var fin = toAbsoluteIndex(end === undefined ? len : end, len);\n    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));\n    var viewS = new $DataView(this);\n    var viewT = new $DataView(result);\n    var index = 0;\n\n    while (first < fin) {\n      viewT.setUint8(index++, viewS.getUint8(first++));\n    }\n\n    return result;\n  }\n});\n\nrequire('./_set-species')(ARRAY_BUFFER);","map":{"version":3,"sources":["C:/Users/chris/Documents/GitHub/ResumeWebSite/Newsite/resume/node_modules/babel-polyfill/node_modules/core-js/modules/es6.typed.array-buffer.js"],"names":["$export","require","$typed","buffer","anObject","toAbsoluteIndex","toLength","isObject","ArrayBuffer","speciesConstructor","$ArrayBuffer","$DataView","DataView","$isView","ABV","isView","$slice","prototype","slice","VIEW","ARRAY_BUFFER","G","W","F","S","CONSTR","it","P","U","undefined","byteLength","start","end","call","len","first","fin","result","viewS","viewT","index","setUint8","getUint8"],"mappings":"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","sourcesContent":["'use strict';\r\nvar $export = require('./_export');\r\nvar $typed = require('./_typed');\r\nvar buffer = require('./_typed-buffer');\r\nvar anObject = require('./_an-object');\r\nvar toAbsoluteIndex = require('./_to-absolute-index');\r\nvar toLength = require('./_to-length');\r\nvar isObject = require('./_is-object');\r\nvar ArrayBuffer = require('./_global').ArrayBuffer;\r\nvar speciesConstructor = require('./_species-constructor');\r\nvar $ArrayBuffer = buffer.ArrayBuffer;\r\nvar $DataView = buffer.DataView;\r\nvar $isView = $typed.ABV && ArrayBuffer.isView;\r\nvar $slice = $ArrayBuffer.prototype.slice;\r\nvar VIEW = $typed.VIEW;\r\nvar ARRAY_BUFFER = 'ArrayBuffer';\r\n\r\n$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });\r\n\r\n$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {\r\n  // 24.1.3.1 ArrayBuffer.isView(arg)\r\n  isView: function isView(it) {\r\n    return $isView && $isView(it) || isObject(it) && VIEW in it;\r\n  }\r\n});\r\n\r\n$export($export.P + $export.U + $export.F * require('./_fails')(function () {\r\n  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;\r\n}), ARRAY_BUFFER, {\r\n  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)\r\n  slice: function slice(start, end) {\r\n    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix\r\n    var len = anObject(this).byteLength;\r\n    var first = toAbsoluteIndex(start, len);\r\n    var fin = toAbsoluteIndex(end === undefined ? len : end, len);\r\n    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));\r\n    var viewS = new $DataView(this);\r\n    var viewT = new $DataView(result);\r\n    var index = 0;\r\n    while (first < fin) {\r\n      viewT.setUint8(index++, viewS.getUint8(first++));\r\n    } return result;\r\n  }\r\n});\r\n\r\nrequire('./_set-species')(ARRAY_BUFFER);\r\n"]},"metadata":{},"sourceType":"script"}